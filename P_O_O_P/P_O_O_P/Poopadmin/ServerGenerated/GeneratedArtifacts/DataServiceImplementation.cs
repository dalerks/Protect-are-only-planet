//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using global::System.Linq;

namespace LightSwitchApplication.Implementation
{
    
    [global::System.ServiceModel.DomainServices.Hosting.EnableClientAccess()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class poopstatsDataDomainService
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DomainService<global::poopstatsData.Implementation.poopstatsDataObjectContext>
    {
    
        public poopstatsDataDomainService() : base()
        {
        }
    
    #region Public Methods
    
    #region DropShip
    
        public void InsertDropShip(global::poopstatsData.Implementation.DropShip entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.DropShips.AddObject(entity);
            }
        }
    
        public void UpdateDropShip(global::poopstatsData.Implementation.DropShip currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.DropShips, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteDropShip(global::poopstatsData.Implementation.DropShip entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.DropShips.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Gift
    
        public void InsertGift(global::poopstatsData.Implementation.Gift entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Gifts.AddObject(entity);
            }
        }
    
        public void UpdateGift(global::poopstatsData.Implementation.Gift currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Gifts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteGift(global::poopstatsData.Implementation.Gift entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Gifts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region ORG
    
        public void InsertORG(global::poopstatsData.Implementation.ORG entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.ORGs.AddObject(entity);
            }
        }
    
        public void UpdateORG(global::poopstatsData.Implementation.ORG currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.ORGs, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteORG(global::poopstatsData.Implementation.ORG entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ORGs.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Batch
    
        public void InsertBatch(global::poopstatsData.Implementation.Batch entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Batches.AddObject(entity);
            }
        }
    
        public void UpdateBatch(global::poopstatsData.Implementation.Batch currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Batches, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteBatch(global::poopstatsData.Implementation.Batch entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Batches.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Order_Detail
    
        public void InsertOrder_Detail(global::poopstatsData.Implementation.Order_Detail entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Order_Details.AddObject(entity);
            }
        }
    
        public void UpdateOrder_Detail(global::poopstatsData.Implementation.Order_Detail currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Order_Details, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteOrder_Detail(global::poopstatsData.Implementation.Order_Detail entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Order_Details.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region aspnet_WebEvent_Event
    
        public void Insertaspnet_WebEvent_Event(global::poopstatsData.Implementation.aspnet_WebEvent_Event entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.aspnet_WebEvent_Events.AddObject(entity);
            }
        }
    
        public void Updateaspnet_WebEvent_Event(global::poopstatsData.Implementation.aspnet_WebEvent_Event currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.aspnet_WebEvent_Events, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deleteaspnet_WebEvent_Event(global::poopstatsData.Implementation.aspnet_WebEvent_Event entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.aspnet_WebEvent_Events.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region c_Error
    
        public void Insertc_Error(global::poopstatsData.Implementation.c_Error entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Errors.AddObject(entity);
            }
        }
    
        public void Updatec_Error(global::poopstatsData.Implementation.c_Error currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Errors, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void Deletec_Error(global::poopstatsData.Implementation.c_Error entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Errors.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region XML
    
        public void InsertXML(global::poopstatsData.Implementation.XML entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.XMLs.AddObject(entity);
            }
        }
    
        public void UpdateXML(global::poopstatsData.Implementation.XML currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.XMLs, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteXML(global::poopstatsData.Implementation.XML entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.XMLs.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Order
    
        public void InsertOrder(global::poopstatsData.Implementation.Order entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Orders.AddObject(entity);
            }
        }
    
        public void UpdateOrder(global::poopstatsData.Implementation.Order currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Orders, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteOrder(global::poopstatsData.Implementation.Order entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Orders.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Orders_For_Art
    
        public void InsertOrders_For_Art(global::poopstatsData.Implementation.Orders_For_Art entity)
        {
            if (entity.EntityState != global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.ObjectStateManager.ChangeObjectState(entity, global::System.Data.EntityState.Added);
            }
            else
            {
                this.ObjectContext.Orders_For_Arts.AddObject(entity);
            }
        }
    
        public void UpdateOrders_For_Art(global::poopstatsData.Implementation.Orders_For_Art currentEntity)
        {
            global::System.ServiceModel.DomainServices.EntityFramework.ObjectContextExtensions.AttachAsModified(this.ObjectContext.Orders_For_Arts, currentEntity, this.ChangeSet.GetOriginal(currentEntity));
        }
    
        public void DeleteOrders_For_Art(global::poopstatsData.Implementation.Orders_For_Art entity)
        {
            if (entity.EntityState == global::System.Data.EntityState.Detached)
            {
                this.ObjectContext.Orders_For_Arts.Attach(entity);
            }
    
            this.DeleteEntity(entity);
        }
    #endregion
    
    #region Queries
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> DropShips_Single(string frameworkOperators, global::System.Nullable<int> Dropshipid)
        {
            return this.GetQuery<global::poopstatsData.Implementation.DropShip>("DropShips_Single", frameworkOperators, Dropshipid);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> DropShips_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Dropshipid)
        {
            return this.GetQuery<global::poopstatsData.Implementation.DropShip>("DropShips_SingleOrDefault", frameworkOperators, Dropshipid);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> DropShips_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.DropShip>("DropShips_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> Gifts_Single(string frameworkOperators, string SKU)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Gift>("Gifts_Single", frameworkOperators, SKU);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> Gifts_SingleOrDefault(string frameworkOperators, string SKU)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Gift>("Gifts_SingleOrDefault", frameworkOperators, SKU);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> Gifts_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Gift>("Gifts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> ORGs_Single(string frameworkOperators, string ORG_ID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.ORG>("ORGs_Single", frameworkOperators, ORG_ID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> ORGs_SingleOrDefault(string frameworkOperators, string ORG_ID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.ORG>("ORGs_SingleOrDefault", frameworkOperators, ORG_ID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> ORGs_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.ORG>("ORGs_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> Batches_Single(string frameworkOperators, global::System.Nullable<int> Batchid)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Batch>("Batches_Single", frameworkOperators, Batchid);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> Batches_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> Batchid)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Batch>("Batches_SingleOrDefault", frameworkOperators, Batchid);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> Batches_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Batch>("Batches_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> Order_Details_Single(string frameworkOperators, global::System.Nullable<int> OrderDetailID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Order_Detail>("Order_Details_Single", frameworkOperators, OrderDetailID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> Order_Details_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> OrderDetailID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Order_Detail>("Order_Details_SingleOrDefault", frameworkOperators, OrderDetailID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> Order_Details_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Order_Detail>("Order_Details_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> aspnet_WebEvent_Events_Single(string frameworkOperators, string EventId)
        {
            return this.GetQuery<global::poopstatsData.Implementation.aspnet_WebEvent_Event>("aspnet_WebEvent_Events_Single", frameworkOperators, EventId);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> aspnet_WebEvent_Events_SingleOrDefault(string frameworkOperators, string EventId)
        {
            return this.GetQuery<global::poopstatsData.Implementation.aspnet_WebEvent_Event>("aspnet_WebEvent_Events_SingleOrDefault", frameworkOperators, EventId);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> aspnet_WebEvent_Events_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.aspnet_WebEvent_Event>("aspnet_WebEvent_Events_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> Errors_Single(string frameworkOperators, global::System.Nullable<int> ErrorId)
        {
            return this.GetQuery<global::poopstatsData.Implementation.c_Error>("Errors_Single", frameworkOperators, ErrorId);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> Errors_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> ErrorId)
        {
            return this.GetQuery<global::poopstatsData.Implementation.c_Error>("Errors_SingleOrDefault", frameworkOperators, ErrorId);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> Errors_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.c_Error>("Errors_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> XMLs_Single(string frameworkOperators, global::System.Nullable<int> XMLID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.XML>("XMLs_Single", frameworkOperators, XMLID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> XMLs_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> XMLID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.XML>("XMLs_SingleOrDefault", frameworkOperators, XMLID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> XMLs_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.XML>("XMLs_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> Orders_Single(string frameworkOperators, global::System.Nullable<int> OrderNumber)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Order>("Orders_Single", frameworkOperators, OrderNumber);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> Orders_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> OrderNumber)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Order>("Orders_SingleOrDefault", frameworkOperators, OrderNumber);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> Orders_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Order>("Orders_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Orders_For_Arts_Single(string frameworkOperators, global::System.Nullable<int> OrderDetailID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Orders_For_Arts_Single", frameworkOperators, OrderDetailID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Orders_For_Arts_SingleOrDefault(string frameworkOperators, global::System.Nullable<int> OrderDetailID)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Orders_For_Arts_SingleOrDefault", frameworkOperators, OrderDetailID);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Orders_For_Arts_All(string frameworkOperators)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Orders_For_Arts_All", frameworkOperators);
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Query1(string frameworkOperators, global::System.Nullable<int> Batchid)
        {
            return this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Query1", frameworkOperators, Batchid);
        }
    
    #endregion
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public int __GetEntitySetCanInformation(string entitySetName)
        {
            return base.GetEntitySetCanInformation(entitySetName);
        }
    
        [global::System.ServiceModel.DomainServices.Server.Invoke(HasSideEffects=false)]
        public bool __CanExecuteOperation(string operationName)
        {
            return base.CanExecuteOperation(operationName);
        }
    
    #endregion
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService()
        {
            return new global::LightSwitchApplication.DataWorkspace().poopstatsData;
        }
    
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class poopstatsDataServiceImplementation
        : global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceImplementation<global::poopstatsData.Implementation.poopstatsDataObjectContext>
    {
        public poopstatsDataServiceImplementation(global::Microsoft.LightSwitch.IDataService dataService) : base(dataService)
        {
        }
    
    #region Queries
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> DropShips_Single(global::System.Nullable<int> Dropshipid)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.DropShip>("DropShips_All"),
                (d) => (Dropshipid.HasValue && (d.Dropshipid == Dropshipid)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> DropShips_SingleOrDefault(global::System.Nullable<int> Dropshipid)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.DropShip>("DropShips_All"),
                (d) => (Dropshipid.HasValue && (d.Dropshipid == Dropshipid)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> DropShips_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.DropShip> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.DropShip>("[DropShips]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> Gifts_Single(string SKU)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Gift>("Gifts_All"),
                (g) => (g.SKU.CompareTo(SKU) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> Gifts_SingleOrDefault(string SKU)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Gift>("Gifts_All"),
                (g) => (g.SKU.CompareTo(SKU) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> Gifts_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Gift> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.Gift>("[Gifts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> ORGs_Single(string ORG_ID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.ORG>("ORGs_All"),
                (o) => (o.ORG_ID.CompareTo(ORG_ID) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> ORGs_SingleOrDefault(string ORG_ID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.ORG>("ORGs_All"),
                (o) => (o.ORG_ID.CompareTo(ORG_ID) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> ORGs_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.ORG> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.ORG>("[ORGs]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> Batches_Single(global::System.Nullable<int> Batchid)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Batch>("Batches_All"),
                (b) => (Batchid.HasValue && (b.Batchid == Batchid)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> Batches_SingleOrDefault(global::System.Nullable<int> Batchid)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Batch>("Batches_All"),
                (b) => (Batchid.HasValue && (b.Batchid == Batchid)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> Batches_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Batch> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.Batch>("[Batches]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> Order_Details_Single(global::System.Nullable<int> OrderDetailID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Order_Detail>("Order_Details_All"),
                (o) => (OrderDetailID.HasValue && (o.OrderDetailID == OrderDetailID)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> Order_Details_SingleOrDefault(global::System.Nullable<int> OrderDetailID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Order_Detail>("Order_Details_All"),
                (o) => (OrderDetailID.HasValue && (o.OrderDetailID == OrderDetailID)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> Order_Details_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order_Detail> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.Order_Detail>("[Order_Details]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> aspnet_WebEvent_Events_Single(string EventId)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.aspnet_WebEvent_Event>("aspnet_WebEvent_Events_All"),
                (a) => (a.EventId.CompareTo(EventId) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> aspnet_WebEvent_Events_SingleOrDefault(string EventId)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.aspnet_WebEvent_Event>("aspnet_WebEvent_Events_All"),
                (a) => (a.EventId.CompareTo(EventId) == 0));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> aspnet_WebEvent_Events_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.aspnet_WebEvent_Event> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.aspnet_WebEvent_Event>("[aspnet_WebEvent_Events]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> Errors_Single(global::System.Nullable<int> ErrorId)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.c_Error>("Errors_All"),
                (c) => (ErrorId.HasValue && (c.ErrorId == ErrorId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> Errors_SingleOrDefault(global::System.Nullable<int> ErrorId)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.c_Error>("Errors_All"),
                (c) => (ErrorId.HasValue && (c.ErrorId == ErrorId)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> Errors_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.c_Error> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.c_Error>("[Errors]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> XMLs_Single(global::System.Nullable<int> XMLID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.XML>("XMLs_All"),
                (x) => (XMLID.HasValue && (x.XMLID == XMLID)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> XMLs_SingleOrDefault(global::System.Nullable<int> XMLID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.XML>("XMLs_All"),
                (x) => (XMLID.HasValue && (x.XMLID == XMLID)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> XMLs_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.XML> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.XML>("[XMLs]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> Orders_Single(global::System.Nullable<int> OrderNumber)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Order>("Orders_All"),
                (o) => (OrderNumber.HasValue && (o.OrderNumber == OrderNumber)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> Orders_SingleOrDefault(global::System.Nullable<int> OrderNumber)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Order>("Orders_All"),
                (o) => (OrderNumber.HasValue && (o.OrderNumber == OrderNumber)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> Orders_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Order> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.Order>("[Orders]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Orders_For_Arts_Single(global::System.Nullable<int> OrderDetailID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Orders_For_Arts_All"),
                (o) => (OrderDetailID.HasValue && (o.OrderDetailID == OrderDetailID)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Orders_For_Arts_SingleOrDefault(global::System.Nullable<int> OrderDetailID)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> query;
            query = global::System.Linq.Queryable.Where(
                this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Orders_For_Arts_All"),
                (o) => (OrderDetailID.HasValue && (o.OrderDetailID == OrderDetailID)));
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Orders_For_Arts_All()
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> query;
            query = base.CreateQuery<global::poopstatsData.Implementation.Orders_For_Art>("[Orders_For_Arts]").AsQueryable();
            return query;
        }
    
        public global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> Query1(global::System.Nullable<int> Batchid)
        {
            global::System.Linq.IQueryable<global::poopstatsData.Implementation.Orders_For_Art> query;
            query = this.GetQuery<global::poopstatsData.Implementation.Orders_For_Art>("Orders_For_Arts_All");
            return query;
        }
    
    #endregion

    #region Protected Methods
        protected override object CreateObject(global::System.Type type)
        {
            if (type == typeof(global::poopstatsData.Implementation.DropShip))
            {
                return new global::poopstatsData.Implementation.DropShip();
            }
            if (type == typeof(global::poopstatsData.Implementation.Gift))
            {
                return new global::poopstatsData.Implementation.Gift();
            }
            if (type == typeof(global::poopstatsData.Implementation.ORG))
            {
                return new global::poopstatsData.Implementation.ORG();
            }
            if (type == typeof(global::poopstatsData.Implementation.Batch))
            {
                return new global::poopstatsData.Implementation.Batch();
            }
            if (type == typeof(global::poopstatsData.Implementation.Order_Detail))
            {
                return new global::poopstatsData.Implementation.Order_Detail();
            }
            if (type == typeof(global::poopstatsData.Implementation.aspnet_WebEvent_Event))
            {
                return new global::poopstatsData.Implementation.aspnet_WebEvent_Event();
            }
            if (type == typeof(global::poopstatsData.Implementation.c_Error))
            {
                return new global::poopstatsData.Implementation.c_Error();
            }
            if (type == typeof(global::poopstatsData.Implementation.XML))
            {
                return new global::poopstatsData.Implementation.XML();
            }
            if (type == typeof(global::poopstatsData.Implementation.Order))
            {
                return new global::poopstatsData.Implementation.Order();
            }
            if (type == typeof(global::poopstatsData.Implementation.Orders_For_Art))
            {
                return new global::poopstatsData.Implementation.Orders_For_Art();
            }
    
            return base.CreateObject(type);
        }
    
        protected override global::poopstatsData.Implementation.poopstatsDataObjectContext CreateObjectContext()
        {
            return new global::poopstatsData.Implementation.poopstatsDataObjectContext(base.GetEntityConnectionString(
                "poopstatsData", 
                "res://*/poopstatsData.csdl|res://*/poopstatsData.ssdl|res://*/poopstatsData.msl",
                "System.Data.SqlClient"));
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IEntityImplementation CreateEntityImplementation<T>()
        {
            if (typeof(T) == typeof(global::LightSwitchApplication.DropShip))
            {
                return new global::poopstatsData.Implementation.DropShip();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Gift))
            {
                return new global::poopstatsData.Implementation.Gift();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.ORG))
            {
                return new global::poopstatsData.Implementation.ORG();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Batch))
            {
                return new global::poopstatsData.Implementation.Batch();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Order_Detail))
            {
                return new global::poopstatsData.Implementation.Order_Detail();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.aspnet_WebEvent_Event))
            {
                return new global::poopstatsData.Implementation.aspnet_WebEvent_Event();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.c_Error))
            {
                return new global::poopstatsData.Implementation.c_Error();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.XML))
            {
                return new global::poopstatsData.Implementation.XML();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Order))
            {
                return new global::poopstatsData.Implementation.Order();
            }
            if (typeof(T) == typeof(global::LightSwitchApplication.Orders_For_Art))
            {
                return new global::poopstatsData.Implementation.Orders_For_Art();
            }
            return null;
        }
    
    #endregion
    
    }
    
    #region DataServiceImplementationFactory
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.IDataServiceFactory))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class DataServiceFactory :
        global::Microsoft.LightSwitch.ServerGenerated.Implementation.DataServiceFactory
    {
    
        protected override global::Microsoft.LightSwitch.IDataService CreateDataService(global::System.Type dataServiceType)
        {
            if (dataServiceType == typeof(global::LightSwitchApplication.poopstatsData))
            {
                return new global::LightSwitchApplication.poopstatsDataService();
            }
            return base.CreateDataService(dataServiceType);
        }
    
        protected override global::Microsoft.LightSwitch.Internal.IDataServiceImplementation CreateDataServiceImplementation<TDataService>(TDataService dataService)
        {
            if (typeof(TDataService) == typeof(global::LightSwitchApplication.poopstatsData))
            {
                return new global::LightSwitchApplication.Implementation.poopstatsDataServiceImplementation(dataService);
            }
            return base.CreateDataServiceImplementation(dataService);
        }
    }
    #endregion
    
    [global::System.ComponentModel.Composition.PartCreationPolicy(global::System.ComponentModel.Composition.CreationPolicy.Shared)]
    [global::System.ComponentModel.Composition.Export(typeof(global::Microsoft.LightSwitch.Internal.ITypeMappingProvider))]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class __TypeMapping
        : global::Microsoft.LightSwitch.Internal.ITypeMappingProvider
    {
        global::System.Type global::Microsoft.LightSwitch.Internal.ITypeMappingProvider.GetImplementationType(global::System.Type definitionType)
        {
            if (typeof(global::LightSwitchApplication.DropShip) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.DropShip);
            }
            if (typeof(global::LightSwitchApplication.Gift) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.Gift);
            }
            if (typeof(global::LightSwitchApplication.ORG) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.ORG);
            }
            if (typeof(global::LightSwitchApplication.Batch) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.Batch);
            }
            if (typeof(global::LightSwitchApplication.Order_Detail) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.Order_Detail);
            }
            if (typeof(global::LightSwitchApplication.aspnet_WebEvent_Event) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.aspnet_WebEvent_Event);
            }
            if (typeof(global::LightSwitchApplication.c_Error) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.c_Error);
            }
            if (typeof(global::LightSwitchApplication.XML) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.XML);
            }
            if (typeof(global::LightSwitchApplication.Order) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.Order);
            }
            if (typeof(global::LightSwitchApplication.Orders_For_Art) == definitionType)
            {
                return typeof(global::poopstatsData.Implementation.Orders_For_Art);
            }
            return null;
        }
    }
}

namespace poopstatsData.Implementation
{

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class DropShip :
        global::LightSwitchApplication.DropShip.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Gift :
        global::LightSwitchApplication.Gift.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class ORG :
        global::LightSwitchApplication.ORG.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Batch :
        global::LightSwitchApplication.Batch.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Order_Detail :
        global::LightSwitchApplication.Order_Detail.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class aspnet_WebEvent_Event :
        global::LightSwitchApplication.aspnet_WebEvent_Event.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class c_Error :
        global::LightSwitchApplication.c_Error.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class XML :
        global::LightSwitchApplication.XML.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Order :
        global::LightSwitchApplication.Order.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "10.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public partial class Orders_For_Art :
        global::LightSwitchApplication.Orders_For_Art.DetailsClass.IImplementation
    {
    
        #region IEntityImplementation Members
        private global::Microsoft.LightSwitch.Internal.IEntityImplementationHost __host;
        
        global::Microsoft.LightSwitch.Internal.IEntityImplementationHost global::Microsoft.LightSwitch.Internal.IEntityImplementation.Host
        {
            get
            {
                return this.__host;
            }
        }
        
        void global::Microsoft.LightSwitch.Internal.IEntityImplementation.Initialize(global::Microsoft.LightSwitch.Internal.IEntityImplementationHost host)
        {
            this.__host = host;
        }
        
        protected override void OnPropertyChanged(string propertyName)
        {
            base.OnPropertyChanged(propertyName);
            if (this.__host != null)
            {
                this.__host.RaisePropertyChanged(propertyName);
            }
        }
        #endregion
    }
    
}

